a=1
a
install.packages("data.table")
require(data.table)
remove.packages("data.table")
install.packages("data.table")
install.packages("data.table", type="source")
remove.packages("data.table")
install.packages("data.table")
install.packages("data.table", type="source")
install.packages("data.table", type="source")
remove.packages("data.table")
install.packages("data.table")
install.packages("data.table", type="source")
require(data.table)
# Databases' constants (run only once)
#dv <- paste(ROOT,"R/drugbank_5.1.8.db", sep = "/")
dv <- "R/drugbank_5.1.8.db"
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl", host = "https://www.ensembl.org") #Anteriormente uswest.ensembl.org / https://useast.ensembl.org / https://www.ensembl.org
library(biomaRt)
install.packages("biomaRt")
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(biomaRt)
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl", host = "https://www.ensembl.org") #Anteriormente uswest.ensembl.org / https://useast.ensembl.org / https://www.ensembl.org
View(ensembl@attributes)
ensembl@host
ensembl2 <- useMart("ensembl", dataset = "hsapiens_gene_ensembl", host = "https://uswest.ensembl.org")
ensembl2 <- useMart("ensembl", dataset = "hsapiens_gene_ensembl", host = "http://uswest.ensembl.org")
ensembl2 <- useMart("ensembl", dataset = "hsapiens_gene_ensembl", host = "http://useast.ensembl.org")
install.packages(c("bslib", "cli", "cluster", "cpp11", "curl", "data.table", "DBI", "digest", "e1071", "fansi", "filelock", "foreign", "future", "future.apply", "glue", "hardhat", "haven", "jsonlite", "listenv", "MASS", "Matrix", "mgcv", "nlme", "processx", "progress", "ps", "ragg", "Rcpp", "RCurl", "readr", "recipes", "reprex", "rJava", "rlang", "rpart", "RSQLite", "rvest", "sass", "scales", "stringi", "tidyr", "timechange", "timeDate", "uuid", "vctrs", "vroom", "withr", "xfun", "XML", "xml2", "yaml"))
install.packages("DBI")
require(data.table)
remove.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table", type="source")
require(data.table)
require(foreign)
require(data.table)
setwd("~/Dropbox/workspace/data/github-datasets/Olivar/Andalucia/PlagaMoscaOlivo")
df = as.data.table(read.arff("sds_reg_PICA_H1.arff"))
df[, CLASS := cut(CLASS, breaks=c(0,1,5,1000), include.lowest=T, right=F)]
summary(df$CLASS)
df = as.data.table(read.arff("sds_reg_PICA_H1.arff"))
df[, CLASS := cut(CLASS, breaks=c(0,1,5,1000), labels=c("[0,1)", "[1,5)", "[5,Inf)"), include.lowest=T, right=F)]
summary(df$CLASS)
write.arff(df, "sds_classif3_PICA_H1.arff", relation = "sds_classif3_PICA_H1")
df = as.data.table(read.arff("sds_reg_PICA_H2.arff"))
df[, CLASS := cut(CLASS, breaks=c(0,1,5,1000), labels=c("[0,1)", "[1,5)", "[5,Inf)"), include.lowest=T, right=F)]
write.arff(df, "sds_classif3_PICA_H2.arff", relation = "sds_classif3_PICA_H2")
df = as.data.table(read.arff("sds_reg_PICA_H3.arff"))
df[, CLASS := cut(CLASS, breaks=c(0,1,5,1000), labels=c("[0,1)", "[1,5)", "[5,Inf)"), include.lowest=T, right=F)]
write.arff(df, "sds_classif3_PICA_H3.arff", relation = "sds_classif3_PICA_H3")
df = as.data.table(read.arff("sds_reg_PICA_H4.arff"))
df[, CLASS := cut(CLASS, breaks=c(0,1,5,1000), labels=c("[0,1)", "[1,5)", "[5,Inf)"), include.lowest=T, right=F)]
write.arff(df, "sds_classif3_PICA_H4.arff", relation = "sds_classif3_PICA_H4")
df = as.data.table(read.arff("sds_reg_TRAM_H1.arff"))
df[, CLASS := cut(CLASS, breaks=c(0,1,3.15,10000), labels=c("[0,1)", "[1,3.15)", "[3.15,Inf)"), include.lowest=T, right=F)]
summary(df$CLASS)
write.arff(df, "sds_classif3_TRAM_H1.arff", relation = "sds_classif3_TRAM_H1")
df = as.data.table(read.arff("sds_reg_TRAM_H2.arff"))
df[, CLASS := cut(CLASS, breaks=c(0,1,3.15,10000), labels=c("[0,1)", "[1,3.15)", "[3.15,Inf)"), include.lowest=T, right=F)]
write.arff(df, "sds_classif3_TRAM_H2.arff", relation = "sds_classif3_TRAM_H2")
df = as.data.table(read.arff("sds_reg_TRAM_H3.arff"))
df[, CLASS := cut(CLASS, breaks=c(0,1,3.15,10000), labels=c("[0,1)", "[1,3.15)", "[3.15,Inf)"), include.lowest=T, right=F)]
write.arff(df, "sds_classif3_TRAM_H3.arff", relation = "sds_classif3_TRAM_H3")
df = as.data.table(read.arff("sds_reg_TRAM_H4.arff"))
df[, CLASS := cut(CLASS, breaks=c(0,1,3.15,10000), labels=c("[0,1)", "[1,3.15)", "[3.15,Inf)"), include.lowest=T, right=F)]
write.arff(df, "sds_classif3_TRAM_H4.arff", relation = "sds_classif3_TRAM_H4")
